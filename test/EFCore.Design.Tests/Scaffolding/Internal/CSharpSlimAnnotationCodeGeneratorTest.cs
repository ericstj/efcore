// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.InMemory.Storage.Internal;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Query.SqlExpressions;
using Microsoft.EntityFrameworkCore.SqlServer.Design.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.TestUtilities;
using Microsoft.Extensions.DependencyInjection;
using Xunit;

namespace Microsoft.EntityFrameworkCore.Scaffolding.Internal
{
    public class CSharpSlimAnnotationCodeGeneratorTest
    {
        [ConditionalFact]
        public void Empty_model()
        {
            Test(
                new EmptyContext(),
                new CompiledModelCodeGenerationOptions(),
                code => AssertFileContents(
                    "EmptyContextModel.cs",
                    @"// <auto-generated />
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    [DbContext(typeof(CSharpSlimAnnotationCodeGeneratorTest.EmptyContext))]
    partial class EmptyContextModel : SlimModel
    {
        private static EmptyContextModel _instance;
        public static IModel Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new EmptyContextModel();
                    _instance.Initialize();
                }

                return _instance;
            }
        }

        protected override void Initialize()
        {
        }
    }
}
",
                        code.Single()),
                model => {
                    Assert.Empty(model.GetEntityTypes());
                    Assert.Same(model, model.FindRuntimeAnnotationValue("ReadOnlyModel"));
                });
        }

        public class EmptyContext : ContextBase
        {
        }

        [ConditionalFact]
        public void Global_namespace_works()
        {
            Test(
                new GlobalNamespaceContext(),
                new CompiledModelCodeGenerationOptions
                {
                    ModelNamespace = string.Empty
                },
                code =>
                {
                    Assert.All(code, f => Assert.DoesNotContain("namespace ", f.Code));
                },
                model =>
                {
                    Assert.NotNull(model.FindEntityType("1"));
                });
        }

        public class GlobalNamespaceContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity("1", e =>
                {
                    e.Property<int>("Id");
                    e.HasKey("Id");
                });
            }
        }

        [ConditionalFact]
        public void Throws_for_constructor_binding()
        {
            Test(
                new LazyLoadingProxiesContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: DesignStrings.CompiledModelConstructorBinding("Lazy"));
        }

        public class LazyLoadingProxiesContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity("Lazy", e =>
                {
                    e.Property<int>("Id");
                    e.HasKey("Id");
                });
            }

            protected override void OnConfiguring(DbContextOptionsBuilder options)
                => base.OnConfiguring(options.UseLazyLoadingProxies());
        }

        [ConditionalFact]
        public void Manual_lazy_loading()
        {
            Test(
                new LazyLoadingContext(),
                new CompiledModelCodeGenerationOptions(),
                assertModel: model =>
                {
                    var lazyConstructorEntity = model.FindEntityType(typeof(LazyConstructorEntity));
                    var lazyParameterBinding = lazyConstructorEntity.ConstructorBinding.ParameterBindings.Single();
                    Assert.Equal(typeof(ILazyLoader), lazyParameterBinding.ParameterType);
                    var lazyPropertyEntity = model.FindEntityType(typeof(LazyPropertyEntity));
                    var lazyServiceProperty = lazyPropertyEntity.GetServiceProperties().Single();
                    Assert.Equal(typeof(ILazyLoader), lazyServiceProperty.ClrType);
                });
        }

        public class LazyLoadingContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity<LazyConstructorEntity>();
            }
        }

        public class LazyConstructorEntity
        {
            private readonly ILazyLoader _loader;

            public LazyConstructorEntity(ILazyLoader loader)
            {
                _loader = loader;
            }

            public int Id { get; set; }

            public LazyPropertyEntity LazyPropertyEntity { get; set; }
        }

        public class LazyPropertyEntity
        {
            public ILazyLoader Loader { get; set; }

            public LazyPropertyEntity()
            {
            }

            public int Id { get; set; }
            public int LazyConstructorEntityId { get; set; }

            public LazyConstructorEntity LazyConstructorEntity { get; set; }
        }

        [ConditionalFact]
        public void Throws_for_query_filter()
        {
            Test(
                new QueryFilterContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: DesignStrings.CompiledModelQueryFilter("QueryFilter"));
        }

        public class QueryFilterContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity("QueryFilter", e =>
                {
                    e.Property<int>("Id");
                    e.HasKey("Id");
                    e.HasQueryFilter((Expression<Func<Dictionary<string, object>, bool>>)(e => e != null));
                });
            }
        }

        [ConditionalFact]
        public void Throws_for_defining_query()
        {
            Test(
                new DefiningQueryContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: DesignStrings.CompiledModelDefiningQuery("object"));
        }

        public class DefiningQueryContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity<object>(e =>
                {
                    e.Property<int>("Id");
                    e.HasKey("Id");
                    e.Metadata.SetInMemoryQuery((Expression<Func<IQueryable<object>>>)
                        (() => Set<object>()));
                });
            }
        }

        [ConditionalFact]
        public void Throws_for_value_generator()
        {
            Test(
                new ValueGeneratorContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: DesignStrings.CompiledModelValueGenerator("MyEntity", "Id"));
        }

        public class ValueGeneratorContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity("MyEntity", e =>
                {
                    e.Property<int>("Id").HasValueGenerator((p, e) => null);
                    e.HasKey("Id");
                });
            }
        }

        [ConditionalFact]
        public void Throws_for_value_converter()
        {
            Test(
                new ValueConverterContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: DesignStrings.CompiledModelValueConverter("MyEntity", "Id"));
        }

        public class ValueConverterContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity("MyEntity", e =>
                {
                    e.Property<int>("Id").HasConversion(i => i, i => i);
                    e.HasKey("Id");
                });
            }
        }

        [ConditionalFact]
        public void Throws_for_value_comparer()
        {
            Test(
                new ValueComparerContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: DesignStrings.CompiledModelValueComparer("MyEntity", "Id"));
        }

        public class ValueComparerContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity("MyEntity", e =>
                {
                    e.Property<int>("Id").HasConversion(typeof(int), new FakeValueComparer());
                    e.HasKey("Id");
                });
            }
        }

        private class FakeValueComparer : ValueComparer<int>
        {
            public FakeValueComparer()
                : base(false)
            {
            }

            public override Type Type { get; } = typeof(int);

            public override bool Equals(object left, object right) => throw new NotImplementedException();

            public override int GetHashCode(object instance) => throw new NotImplementedException();

            public override object Snapshot(object instance) => throw new NotImplementedException();
        }

        [ConditionalFact]
        public void Throws_for_custom_type_mapping()
        {
            Test(
                new TypeMappingContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: DesignStrings.CompiledModelTypeMapping("MyEntity", "Id"));
        }

        public class TypeMappingContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity("MyEntity", e =>
                {
                    e.Property<int>("Id").Metadata.SetTypeMapping(new InMemoryTypeMapping(typeof(int[])));
                    e.HasKey("Id");
                });
            }
        }

        [ConditionalFact]
        public void Throws_for_custom_function_translation()
        {
            Test(
                new FunctionTranslationContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: RelationalStrings.CompiledModelFunctionTranslation("GetSqlFragmentStatic"));
        }

        public class FunctionTranslationContext : SqlServerContextBase
        {
            public static string GetSqlFragmentStatic()
                => throw new NotImplementedException();

            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.HasDbFunction(typeof(FunctionTranslationContext).GetMethod(nameof(GetSqlFragmentStatic)))
                    .HasTranslation(args => new SqlFragmentExpression("NULL"));
            }
        }

        [ConditionalFact]
        public void Throws_for_custom_function_type_mapping()
        {
            Test(
                new FunctionTypeMappingContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: RelationalStrings.CompiledModelFunctionTypeMapping("GetSqlFragmentStatic"));
        }

        public class FunctionTypeMappingContext : SqlServerContextBase
        {
            public static string GetSqlFragmentStatic(string param)
                => throw new NotImplementedException();

            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.HasDbFunction(typeof(FunctionTypeMappingContext).GetMethod(nameof(GetSqlFragmentStatic)))
                    .Metadata.TypeMapping = new StringTypeMapping("varchar");
            }
        }

        [ConditionalFact]
        public void Throws_for_custom_function_parameter_type_mapping()
        {
            Test(
                new FunctionParameterTypeMappingContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: RelationalStrings.CompiledModelFunctionParameterTypeMapping("GetSqlFragmentStatic", "param"));
        }

        public class FunctionParameterTypeMappingContext : SqlServerContextBase
        {
            public static string GetSqlFragmentStatic(string param)
                => throw new NotImplementedException();

            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.HasDbFunction(typeof(FunctionParameterTypeMappingContext).GetMethod(nameof(GetSqlFragmentStatic)))
                    .HasParameter("param").Metadata.TypeMapping = new StringTypeMapping("varchar");
            }
        }

        [ConditionalFact]
        public void DbFunctions()
        {
            Test(
                new DbFunctionContext(),
                new CompiledModelCodeGenerationOptions(),
                code => Assert.Collection(code,
                    c => AssertFileContents("DbFunctionContextModel.cs",
                    @"// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    [DbContext(typeof(CSharpSlimAnnotationCodeGeneratorTest.DbFunctionContext))]
    partial class DbFunctionContextModel : SlimModel
    {
        private static DbFunctionContextModel _instance;
        public static IModel Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new DbFunctionContextModel();
                    _instance.Initialize();
                }

                return _instance;
            }
        }

        protected override void Initialize()
        {
            var data = DataEntityType.Create(this, null);

            DataEntityType.CreateAnnotations(data);

            var functions = new SortedDictionary<string, IDbFunction>();
            var getCount = new SlimDbFunction(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpSlimAnnotationCodeGeneratorTest+DbFunctionContext.GetCount(System.Guid?,string)"",
                this,
                typeof(int),
                ""CustomerOrderCount"",
                schema: ""dbf"",
                storeType: ""int"",
                methodInfo: typeof(CSharpSlimAnnotationCodeGeneratorTest.DbFunctionContext).GetMethod(
                    ""GetCount"",
                    BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly,
                    null,
                    new Type[] { typeof(Guid?), typeof(string) },
                    null),
                scalar: true);

            var id = getCount.AddParameter(
                ""id"",
                typeof(Guid?),
                true,
                ""uniqueidentifier"");
            id.AddAnnotation(""MyAnnotation"", new[] { 1L });

            var condition = getCount.AddParameter(
                ""condition"",
                typeof(string),
                false,
                ""nvarchar(max)"");

            functions[""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpSlimAnnotationCodeGeneratorTest+DbFunctionContext.GetCount(System.Guid?,string)""] = getCount;

            var getData = new SlimDbFunction(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpSlimAnnotationCodeGeneratorTest+DbFunctionContext.GetData()"",
                this,
                typeof(IQueryable<CSharpSlimAnnotationCodeGeneratorTest.Data>),
                ""GetAllData"",
                schema: ""dbo"",
                methodInfo: typeof(CSharpSlimAnnotationCodeGeneratorTest.DbFunctionContext).GetMethod(
                    ""GetData"",
                    BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly,
                    null,
                    new Type[] {  },
                    null));

            functions[""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpSlimAnnotationCodeGeneratorTest+DbFunctionContext.GetData()""] = getData;

            var getData0 = new SlimDbFunction(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpSlimAnnotationCodeGeneratorTest+DbFunctionContext.GetData(int)"",
                this,
                typeof(IQueryable<CSharpSlimAnnotationCodeGeneratorTest.Data>),
                ""GetData"",
                schema: ""dbo"",
                methodInfo: typeof(CSharpSlimAnnotationCodeGeneratorTest.DbFunctionContext).GetMethod(
                    ""GetData"",
                    BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly,
                    null,
                    new Type[] { typeof(int) },
                    null));

            var id0 = getData0.AddParameter(
                ""id"",
                typeof(int),
                false,
                ""int"");

            functions[""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpSlimAnnotationCodeGeneratorTest+DbFunctionContext.GetData(int)""] = getData0;

            var isDateStatic = new SlimDbFunction(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpSlimAnnotationCodeGeneratorTest+DbFunctionContext.IsDateStatic(string)"",
                this,
                typeof(bool),
                ""IsDate"",
                storeType: ""bit"",
                methodInfo: typeof(CSharpSlimAnnotationCodeGeneratorTest.DbFunctionContext).GetMethod(
                    ""IsDateStatic"",
                    BindingFlags.Public | BindingFlags.Static | BindingFlags.DeclaredOnly,
                    null,
                    new Type[] { typeof(string) },
                    null),
                scalar: true,
                nullable: true,
                builtIn: true);

            var date = isDateStatic.AddParameter(
                ""date"",
                typeof(string),
                false,
                ""nvarchar(max)"");

            isDateStatic.AddAnnotation(""MyGuid"", new Guid(""00000000-0000-0000-0000-000000000000""));
            functions[""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpSlimAnnotationCodeGeneratorTest+DbFunctionContext.IsDateStatic(string)""] = isDateStatic;

            this.AddAnnotation(""Relational:DbFunctions"", functions);
            this.AddAnnotation(""Relational:MaxIdentifierLength"", 128);
            this.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.IdentityColumn);
        }
    }
}
",
                    c),
                    c => AssertFileContents("DataEntityType.cs",
                    @"// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    partial class DataEntityType
    {
        public static SlimEntityType Create(SlimModel model, SlimEntityType baseEntityType)
        {
            var slimEntityType = model.AddEntityType(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpSlimAnnotationCodeGeneratorTest+Data"",
                typeof(CSharpSlimAnnotationCodeGeneratorTest.Data),
                baseEntityType);

            var blob = slimEntityType.AddProperty(
                ""Blob"",
                typeof(byte[]),
                propertyInfo: typeof(CSharpSlimAnnotationCodeGeneratorTest.Data).GetProperty(""Blob"", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CSharpSlimAnnotationCodeGeneratorTest.Data).GetField(""<Blob>k__BackingField"", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly)
                ,
                nullable: true);

            return slimEntityType;
        }


        public static void CreateAnnotations(SlimEntityType slimEntityType)
        {
            slimEntityType.AddAnnotation(""Relational:FunctionName"", ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpSlimAnnotationCodeGeneratorTest+DbFunctionContext.GetData()"");
            slimEntityType.AddAnnotation(""Relational:TableName"", null);
            slimEntityType.AddAnnotation(""Relational:Schema"", null);
            slimEntityType.AddAnnotation(""Relational:ViewName"", null);
            slimEntityType.AddAnnotation(""Relational:ViewSchema"", null);
            slimEntityType.AddAnnotation(""Relational:SqlQuery"", null);
        }
    }
}
",
                    c)),
                model =>
                {
                    Assert.Equal(4, model.GetDbFunctions().Count());

                    var getCount = model.FindDbFunction(typeof(DbFunctionContext)
                        .GetMethod("GetCount", BindingFlags.NonPublic | BindingFlags.Instance));
                    Assert.Equal("CustomerOrderCount", getCount.Name);
                    Assert.Equal(typeof(DbFunctionContext).FullName + ".GetCount(System.Guid?,string)", getCount.ModelName);
                    Assert.Equal("dbf", getCount.Schema);
                    Assert.False(getCount.IsNullable);
                    Assert.True(getCount.IsScalar);
                    Assert.False(getCount.IsBuiltIn);
                    Assert.False(getCount.IsAggregate);
                    Assert.Null(getCount.Translation);
                    Assert.Equal(typeof(int), getCount.ReturnType);
                    Assert.Equal("GetCount", getCount.MethodInfo.Name);
                    Assert.Empty(getCount.GetAnnotations());
                    Assert.Empty(getCount.GetRuntimeAnnotations());
                    Assert.Equal("CustomerOrderCount", getCount.StoreFunction.Name);
                    Assert.False(getCount.StoreFunction.IsShared);
                    Assert.Equal(2, getCount.Parameters.Count);

                    var getCountParameter1 = getCount.Parameters[0];
                    Assert.Same(getCount, getCountParameter1.Function);
                    Assert.Equal("id", getCountParameter1.Name);
                    Assert.Equal("uniqueidentifier", getCountParameter1.StoreType);
                    Assert.True(getCountParameter1.PropagatesNullability);
                    Assert.Equal(typeof(Guid?), getCountParameter1.ClrType);
                    Assert.Equal("uniqueidentifier", getCountParameter1.TypeMapping.StoreType);
                    Assert.Single(getCountParameter1.GetAnnotations());
                    Assert.Equal(new[] { 1L }, getCountParameter1["MyAnnotation"]);
                    Assert.Equal("id", getCountParameter1.StoreFunctionParameter.Name);
                    Assert.Equal("uniqueidentifier", getCountParameter1.StoreFunctionParameter.Type);

                    var getCountParameter2 = getCount.Parameters[1];
                    Assert.Same(getCount, getCountParameter2.Function);
                    Assert.Equal("condition", getCountParameter2.Name);
                    Assert.Equal("nvarchar(max)", getCountParameter2.StoreType);
                    Assert.False(getCountParameter2.PropagatesNullability);
                    Assert.Equal(typeof(string), getCountParameter2.ClrType);
                    Assert.Equal("nvarchar(max)", getCountParameter2.TypeMapping.StoreType);
                    Assert.Equal("condition", getCountParameter2.StoreFunctionParameter.Name);
                    Assert.Equal("nvarchar(max)", getCountParameter2.StoreFunctionParameter.Type);

                    var isDate = model.FindDbFunction(typeof(DbFunctionContext).GetMethod("IsDateStatic"));
                    Assert.Equal("IsDate", isDate.Name);
                    Assert.Null(isDate.Schema);
                    Assert.Equal(typeof(DbFunctionContext).FullName + ".IsDateStatic(string)", isDate.ModelName);
                    Assert.True(isDate.IsNullable);
                    Assert.True(isDate.IsScalar);
                    Assert.True(isDate.IsBuiltIn);
                    Assert.False(isDate.IsAggregate);
                    Assert.Null(isDate.Translation);
                    Assert.Equal(typeof(bool), isDate.ReturnType);
                    Assert.Equal("IsDateStatic", isDate.MethodInfo.Name);
                    Assert.Single(isDate.GetAnnotations());
                    Assert.Equal(new Guid(), isDate["MyGuid"]);
                    Assert.Empty(isDate.GetRuntimeAnnotations());
                    Assert.Equal("bit", isDate.StoreFunction.ReturnType);
                    Assert.Empty(isDate.StoreFunction.EntityTypeMappings);
                    Assert.Single(isDate.Parameters);

                    var isDateParameter = isDate.Parameters[0];
                    Assert.Same(isDate, isDateParameter.Function);
                    Assert.Equal("date", isDateParameter.Name);
                    Assert.Equal("nvarchar(max)", isDateParameter.StoreType);
                    Assert.False(isDateParameter.PropagatesNullability);
                    Assert.Equal(typeof(string), isDateParameter.ClrType);
                    Assert.Equal("nvarchar(max)", isDateParameter.TypeMapping.StoreType);
                    Assert.Equal("date", isDateParameter.StoreFunctionParameter.Name);
                    Assert.Equal("nvarchar(max)", isDateParameter.StoreFunctionParameter.Type);

                    var getData = model.FindDbFunction(typeof(DbFunctionContext)
                        .GetMethod("GetData", new Type[] { typeof(int) }));
                    Assert.Equal("GetData", getData.Name);
                    Assert.Equal("dbo", getData.Schema);
                    Assert.Equal(typeof(DbFunctionContext).FullName + ".GetData(int)", getData.ModelName);
                    Assert.False(getData.IsNullable);
                    Assert.False(getData.IsScalar);
                    Assert.False(getData.IsBuiltIn);
                    Assert.False(getData.IsAggregate);
                    Assert.Null(getData.Translation);
                    Assert.Equal(typeof(IQueryable<Data>), getData.ReturnType);
                    Assert.Equal("GetData", getData.MethodInfo.Name);
                    Assert.Empty(getData.GetAnnotations());
                    Assert.Empty(getData.GetRuntimeAnnotations());
                    Assert.Null(getData.StoreFunction.ReturnType);
                    Assert.Equal(typeof(Data), getData.StoreFunction.EntityTypeMappings.Single().EntityType.ClrType);
                    Assert.Single(getData.Parameters);

                    var getDataParameter = getData.Parameters[0];
                    Assert.Same(getData, getDataParameter.Function);
                    Assert.Equal("id", getDataParameter.Name);
                    Assert.Equal("int", getDataParameter.StoreType);
                    Assert.False(getDataParameter.PropagatesNullability);
                    Assert.Equal(typeof(int), getDataParameter.ClrType);
                    Assert.Equal("int", getDataParameter.TypeMapping.StoreType);
                    Assert.Equal("id", getDataParameter.StoreFunctionParameter.Name);
                    Assert.Equal("int", getDataParameter.StoreFunctionParameter.Type);

                    var getDataParameterless = model.FindDbFunction(typeof(DbFunctionContext)
                        .GetMethod("GetData", new Type[0]));
                    Assert.Equal("GetAllData", getDataParameterless.Name);
                    Assert.Equal("dbo", getDataParameterless.Schema);
                    Assert.Equal(typeof(DbFunctionContext).FullName + ".GetData()", getDataParameterless.ModelName);
                    Assert.False(getDataParameterless.IsNullable);
                    Assert.False(getDataParameterless.IsScalar);
                    Assert.False(getDataParameterless.IsBuiltIn);
                    Assert.False(getDataParameterless.IsAggregate);
                    Assert.Null(getDataParameterless.Translation);
                    Assert.Equal(typeof(IQueryable<Data>), getDataParameterless.ReturnType);
                    Assert.Equal("GetData", getDataParameterless.MethodInfo.Name);
                    Assert.Empty(getDataParameterless.GetAnnotations());
                    Assert.Empty(getDataParameterless.GetRuntimeAnnotations());
                    Assert.False(getDataParameterless.StoreFunction.IsBuiltIn);
                    Assert.Equal(typeof(Data), getDataParameterless.StoreFunction.EntityTypeMappings.Single().EntityType.ClrType);
                    Assert.Equal(0, getDataParameterless.Parameters.Count);

                    Assert.Single(model.GetEntityTypes());
                    var dataEntity = model.FindEntityType(typeof(Data));
                    Assert.Null(dataEntity.FindPrimaryKey());
                    var dataEntityFunctionMapping = dataEntity.GetFunctionMappings().Single(m => m.IsDefaultFunctionMapping);
                    Assert.True(dataEntityFunctionMapping.IncludesDerivedTypes);
                    Assert.True(dataEntityFunctionMapping.IsSharedTablePrincipal);
                    Assert.True(dataEntityFunctionMapping.IsSplitEntityTypePrincipal);
                    Assert.Same(getDataParameterless, dataEntityFunctionMapping.DbFunction);

                    var getDataStoreFunction = dataEntityFunctionMapping.StoreFunction;
                    Assert.Same(getDataParameterless, getDataStoreFunction.DbFunctions.Single());
                    Assert.False(getDataStoreFunction.IsOptional(dataEntity));

                    var dataEntityOtherFunctionMapping = dataEntity.GetFunctionMappings().Single(m => !m.IsDefaultFunctionMapping);
                    Assert.True(dataEntityOtherFunctionMapping.IncludesDerivedTypes);
                    Assert.True(dataEntityOtherFunctionMapping.IsSharedTablePrincipal);
                    Assert.True(dataEntityOtherFunctionMapping.IsSplitEntityTypePrincipal);
                    Assert.Same(getData, dataEntityOtherFunctionMapping.DbFunction);

                    var getDataOtherStoreFunction = dataEntityOtherFunctionMapping.StoreFunction;
                    Assert.Same(getData, getDataOtherStoreFunction.DbFunctions.Single());
                    Assert.False(getDataOtherStoreFunction.IsOptional(dataEntity));
                });
        }

        public class DbFunctionContext : SqlServerContextBase
        {
            public static bool IsDateStatic(string date)
                => throw new NotImplementedException();

            private int GetCount(Guid? id, string condition)
                => throw new NotImplementedException();

            public IQueryable<Data> GetData(int id)
            {
                return FromExpression(() => GetData(id));
            }

            public IQueryable<Data> GetData()
            {
                return FromExpression(() => GetData());
            }

            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.HasDbFunction(typeof(DbFunctionContext).GetMethod(nameof(GetCount), BindingFlags.NonPublic | BindingFlags.Instance))
                    .HasName("CustomerOrderCount").HasSchema("dbf").IsNullable(false)
                    .HasParameter("id").PropagatesNullability().Metadata.SetAnnotation("MyAnnotation", new[] { 1L });

                modelBuilder.HasDbFunction(typeof(DbFunctionContext).GetMethod(nameof(IsDateStatic))).HasName("IsDate").IsBuiltIn()
                    .Metadata.SetAnnotation("MyGuid", new Guid());

                modelBuilder.HasDbFunction(typeof(DbFunctionContext).GetMethod(nameof(GetData), new Type[] { typeof(int) }));
                modelBuilder.HasDbFunction(typeof(DbFunctionContext).GetMethod(nameof(GetData), new Type[0]));

                modelBuilder.Entity<Data>().ToFunction(typeof(DbFunctionContext).FullName + ".GetData()", f => f.HasName("GetAllData"))
                    .HasNoKey();
            }
        }

        public class Data
        {
            public byte[] Blob { get; set; }
        }

        // TODO: Test spatial
        // TODO: Test cosmos
        // Nullable reference types

        public abstract class ContextBase : DbContext
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion);
            }

            protected override void OnConfiguring(DbContextOptionsBuilder options)
                => options
                    .EnableServiceProviderCaching(false)
                    .UseInMemoryDatabase(nameof(CSharpSlimAnnotationCodeGeneratorTest));
        }

        public abstract class SqlServerContextBase : DbContext
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion);
            }

            protected override void OnConfiguring(DbContextOptionsBuilder options)
                => options
                    .EnableServiceProviderCaching(false)
                    .UseSqlServer();
        }

        protected void Test(
            DbContext context,
            CompiledModelCodeGenerationOptions options,
            Action<IReadOnlyCollection<ScaffoldedFile>> assertScaffold = null,
            Action<IModel> assertModel = null,
            string expectedExceptionMessage = null)
        {
            var model = context.GetService<IDesignTimeModel>().Model;

            var services = new ServiceCollection()
                .AddEntityFrameworkDesignTimeServices();
            new SqlServerDesignTimeServices().ConfigureDesignTimeServices(services);

            options.ModelNamespace ??= "TestNamespace";
            options.ContextType = context.GetType();

            var generator = services
                .BuildServiceProvider()
                .GetRequiredService<ICompiledModelCodeGeneratorSelector>()
                .Select(options);

            if (expectedExceptionMessage != null)
            {
                Assert.Equal(expectedExceptionMessage,
                    Assert.Throws<InvalidOperationException>(() => generator.GenerateModel(
                        model,
                        options)).Message);
                return;
            }

            var scaffoldedFiles = generator.GenerateModel(
                model,
                options);
            if (assertScaffold != null)
            {
                assertScaffold(scaffoldedFiles);
            }

            var build = new BuildSource
            {
                References =
                {
                    BuildReference.ByName("Microsoft.EntityFrameworkCore"),
                    BuildReference.ByName("Microsoft.EntityFrameworkCore.Abstractions"),
                    BuildReference.ByName("Microsoft.EntityFrameworkCore.Relational"),
                    BuildReference.ByName("Microsoft.EntityFrameworkCore.SqlServer"),
                    BuildReference.ByName(typeof(CSharpSlimAnnotationCodeGeneratorTest).Assembly.GetName().Name)
                },
                Sources = scaffoldedFiles.ToDictionary(f => f.Path, f => f.Code)
            };

            var assembly = build.BuildInMemory();

            if (assertModel != null)
            {
                var modelType = assembly.GetType(options.ModelNamespace + "." + options.ContextType.Name + "Model");
                var instancePropertyInfo = modelType.GetProperty("Instance", BindingFlags.Public | BindingFlags.Static);
                var compiledModel = (IModel)instancePropertyInfo.GetValue(null);

                var modelRuntimeInitializer = context.GetService<IModelRuntimeInitializer>();
                assertModel(modelRuntimeInitializer.Initialize(compiledModel, designTime: false));
            }
        }

        protected static void AssertFileContents(
            string expectedPath,
            string expectedCode,
            ScaffoldedFile file)
        {
            Assert.Equal(expectedPath, file.Path);
            Assert.Equal(expectedCode, file.Code, ignoreLineEndingDifferences: true);
        }
    }
}
